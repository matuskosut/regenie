cmake_minimum_required(VERSION 3.13)
file(STRINGS "VERSION" PROJECT_VERSION)
project(regenie VERSION "${PROJECT_VERSION}")
set(VERSION_NUMBER "${PROJECT_VERSION}")
include(CMakePackageConfigHelpers)
include(GNUInstallDirs)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)  # Ensures -std=c++11
set(CMAKE_CXX_COMPILER g++)

set(THREADS_PREFER_PTHREAD_FLAG TRUE CACHE BOOL "Prefer using the -pthread compiler flag over -lpthread")
set(CMAKE_FIND_SHARED_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
if(BUILD_SHARED_LIBS)
  set(BUILD_STATIC OFF)
else()
  set(BUILD_STATIC ON)
  set(CMAKE_FIND_LIBRARY_SUFFIXES ".a" ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()
set(BLA_STATIC               ${BUILD_STATIC})
set(Boost_USE_STATIC_LIBS    ${BUILD_STATIC})
set(Boost_USE_DEBUG_LIBS     OFF)
set(Boost_USE_MULTITHREADED  ON)
set(Boost_USE_STATIC_RUNTIME OFF)

find_library(ZLIB_LIBRARY z)
find_library(ZSTD_LIBRARY zstd HINTS "${BGEN_PATH}/build/3rd_party/zstd-1.1.0")
find_library(BGEN_LIBRARY bgen HINTS "${BGEN_PATH}/build")
find_library(SQLITE3_LIBRARY sqlite3 HINTS "${BGEN_PATH}/build/3rd_party/sqlite3")
find_library(DB_LIBRARY db HINTS "${BGEN_PATH}/build/db")
find_package(Threads)

if(NOT DEFINED CXXOPTS_INCLUDE_DIR)
  find_path(CXXOPTS_INCLUDE_DIR cxxopts.hpp PATHS "${CMAKE_CURRENT_SOURCE_DIR}/external_libs/cxxopts" PATH_SUFFIXES "include")
endif()
if(CXXOPTS_INCLUDE_DIR)
  add_library(CXXOPTS::CXXOPTS INTERFACE IMPORTED)
  target_include_directories(CXXOPTS::CXXOPTS INTERFACE $<BUILD_INTERFACE:${CXXOPTS_INCLUDE_DIR}>)
endif()

if(BGEN_PATH AND BUILD_STATIC)
  find_library(Boost_LIBRARY libboost.a PATHS "${BGEN_PATH}/build/3rd_party/boost_1_55_0" REQUIRED)
  set(Boost_INCLUDE_DIRS "${BGEN_PATH}/3rd_party/boost_1_55_0")
  if(Boost_LIBRARY)
    add_library(Boost::Boost UNKNOWN IMPORTED)
    set_target_properties(Boost::Boost PROPERTIES
      IMPORTED_LOCATION "${Boost_LIBRARY}"
      INTERFACE_INCLUDE_DIRECTORIES $<BUILD_INTERFACE:${Boost_INCLUDE_DIRS}>
    )
  endif()
else()
  find_package(Boost REQUIRED COMPONENTS system filesystem thread OPTIONAL_COMPONENTS iostreams)
  if(Boost_LIBRARY_DIRS)
    add_library(Boost::Boost IMPORTED INTERFACE)
    target_link_libraries(Boost::Boost INTERFACE Boost::system Boost::filesystem Boost::thread)
    target_include_directories(Boost::Boost INTERFACE $<BUILD_INTERFACE:${Boost_INCLUDE_DIRS}>)
  endif()
endif()
# if(HAS_BOOST_IOSTREAM AND NOT Boost_iostreams_FOUND)
#   find_package(Boost REQUIRED COMPONENTS iostreams)
#   if(Boost_LIBRARY_DIRS)
#     add_library(Boost::iostreams IMPORTED INTERFACE)
#     target_include_directories(Boost::iostreams INTERFACE $<BUILD_INTERFACE:${Boost_INCLUDE_DIRS}>)
#   endif()
# endif()
if(Boost_iostreams_FOUND OR HAS_BOOST_IOSTREAM)
  set(VERSION_NUMBER "${VERSION_NUMBER}.gz")
  add_definitions(-DHAS_BOOST_IOSTREAM=1)
endif()

if(NOT DEFINED ENV{MKLROOT} AND NOT DEFINED ENV{OPENBLAS_ROOT} AND NOT DEFINED ENV{BLAS_DIR})
  set(BLAS_DIR "${CMAKE_PREFIX_PATH}")
elseif(DEFINED ENV{MKLROOT})
  set(BLAS_DIR "$ENV{MKLROOT}")
elseif(DEFINED ENV{OPENBLAS_ROOT})
  set(BLAS_DIR "$ENV{OPENBLAS_ROOT}")
elseif(DEFINED ENV{BLAS_DIR})
  set(BLAS_DIR "$ENV{BLAS_DIR}")
endif()
set(ENV{BLAS_DIR} "${BLAS_DIR}")

if(WITH_MKL OR WITH_OPENBLAS)
  find_package(BLAS REQUIRED)
  if(NOT TARGET BLAS::BLAS)
    add_library(BLAS::BLAS INTERFACE IMPORTED)
    if(BLAS_LIBRARIES)
      message("Redefine BLAS::BLAS target")
      set_target_properties(BLAS::BLAS PROPERTIES
        INTERFACE_LINK_LIBRARIES "${BLAS_LIBRARIES}"
        INTERFACE_INCLUDE_DIRECTORIES $<BUILD_INTERFACE:${BLAS_DIR}/include>
      )
    endif()
  endif()
  find_package(LAPACK REQUIRED)
endif()
find_package(Eigen3 3.3 REQUIRED NO_MODULE)

set(CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_SHARED_LIBRARY_SUFFIXES})
find_library(MLIB_LIBRARY m)
find_library(DL_LIBRARY dl)

set(SIMDE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/external_libs/pgenlib/simde")
file(GLOB SIMDE_SOURCES "${SIMDE_PATH}/*.h" "${SIMDE_PATH}/x86/*.h")
add_library(simde INTERFACE)
target_sources(simde INTERFACE "${SIMDE_SOURCES}")
target_compile_options(simde BEFORE INTERFACE "-fopenmp-simd")
target_include_directories(simde INTERFACE $<BUILD_INTERFACE:${SIMDE_PATH}> $<BUILD_INTERFACE:${SIMDE_PATH}/x86>)

set(PGEN_PATH "${CMAKE_CURRENT_SOURCE_DIR}/external_libs/pgenlib")
file(GLOB PGEN_SOURCES "${PGEN_PATH}/*.cpp" "${PGEN_PATH}/*.h" "${PGEN_PATH}/**/*.cc" "${PGEN_PATH}/**/*.h")
add_library(pgen INTERFACE)
target_link_libraries(pgen INTERFACE simde)
target_sources(pgen INTERFACE "${PGEN_SOURCES}")
target_compile_options(simde BEFORE INTERFACE "-Wall;-ffast-math;-fopenmp-simd")
target_include_directories(pgen INTERFACE $<BUILD_INTERFACE:${PGEN_PATH}>)

file(GLOB REGENIE_PATHS "${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp")
add_executable(regenie "${REGENIE_PATHS}")
if(BUILD_STATIC)
  target_link_options(regenie BEFORE PRIVATE "-static-libgcc;-static-libstdc++")
endif()
target_link_libraries(regenie pgen CXXOPTS::CXXOPTS ${BGEN_LIBRARY} ${DB_LIBRARY} ${SQLITE3_LIBRARY})
if(BGEN_PATH)
  target_include_directories(regenie BEFORE PUBLIC
    $<BUILD_INTERFACE:${BGEN_PATH}/genfile/include>
    $<BUILD_INTERFACE:${BGEN_PATH}/db/include>
    $<BUILD_INTERFACE:${BGEN_PATH}/3rd_party/zstd-1.1.0/lib>
    $<BUILD_INTERFACE:${BGEN_PATH}/3rd_party/sqlite3>
  )
endif()

if(Boost_iostreams_FOUND)
  target_link_libraries(regenie Boost::iostreams)
endif()
add_definitions(-DVERSION_NUMBER="${VERSION_NUMBER}")
target_link_libraries(regenie Boost::Boost)

if(WITH_MKL)
  add_definitions(-DWITH_MKL)
endif()
if(WITH_OPENBLAS)
  add_definitions(-DWITH_OPENBLAS)
endif()
if(WITH_MKL OR WITH_OPENBLAS)
  if(BLAS_FOUND)
    add_definitions(-DEIGEN_USE_BLAS)
    target_link_libraries(regenie BLAS::BLAS)
  endif()
  if(LAPACK_FOUND)
    add_definitions(-DEIGEN_USE_LAPACKE)
    if(TARGET LAPACK::LAPACK)
      target_link_libraries(regenie LAPACK::LAPACK)
    endif()
  endif()
endif()
target_link_libraries(regenie Eigen3::Eigen ${ZSTD_LIBRARY} ${ZLIB_LIBRARY})
target_link_libraries(regenie "-Wl,-Bdynamic" ${MLIB_LIBRARY} ${DL_LIBRARY} ${CMAKE_THREAD_LIBS_INIT})

install(TARGETS regenie RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

write_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
  VERSION ${VERSION_NUMBER}
  COMPATIBILITY SameMajorVersion
  )
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake DESTINATION share/${PROJECT_NAME})

set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH})
include(CPack)
